generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?   @db.VarChar(255)
  username      String?
  email         String?   @unique @db.VarChar(255)
  emailVerified DateTime?
  image         String?
  password      String?   @db.VarChar(255)
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account?
  cartItems     Cart[]
  orders        Order[]
  reviews       Review[]
  sessions      Session[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(255)
  description String?
  createdAt   DateTime  @default(now())
  products    Product[]
}

model Product {
  id          String         @id @default(uuid())
  name        String         @db.VarChar(255)
  description String
  specs       Json?
  brand       String         @default("") @db.VarChar(50)
  price       Float
  stock       Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  categoryId  String
  cartItems   Cart[]
  orderItems  OrderItem[]
  category    Category       @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  reviews     Review[]
}

model ProductImage {
  id        String   @id @default(uuid())
  path      String   @db.VarChar(255)
  alt       String   @db.VarChar(255)
  isPrimary Boolean  @default(false)
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  status      String      @default("pending")
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int      @default(1)
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
