generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?   @db.VarChar(255)
  username      String?
  email         String?   @unique @db.VarChar(255)
  emailVerified DateTime?
  image         String?
  password      String?   @db.VarChar(255) // null for OAuth users
  role          String    @default("user") // "user" or "admin"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  reviews   Review[]
  cartItems Cart[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  createdAt   DateTime @default(now())

  // Relations
  products Product[]
}

model Product {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  description String   @db.Text
  price       Float
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category       @relation(fields: [categoryId], references: [id])
  categoryId String
  reviews    Review[]
  orderItems OrderItem[]
  images     ProductImage[]
  cartItems  Cart[] // Relation with Cart for items added to carts
}

model ProductImage {
  id        String  @id @default(uuid())
  path      String  @db.VarChar(255) // Path or URL for the product image
  alt       String  @db.VarChar(255) // Alt text for the image
  isPrimary Boolean @default(false) // Indicates if this is the primary image
  productId String

  // Relations
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

// Containing items in a single checkout
model Order {
  id          String   @id @default(uuid())
  userId      String
  status      String   @default("pending") // "pending", "shipped", "completed", "cancelled"
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

// Single item in an Order of one or more products
// All Cart items may not be included in Order; hence separate OrderItem model
model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int // Number of units purchased
  price     Float // Price per unit at the time of purchase

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// Contains items added to the cart by user
model Cart {
  id        String @id @default(uuid())
  userId    String
  productId String
  quantity  Int    @default(1)

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, userId]) // The composite unique key
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int      @default(1) // Rating from 1â€“5
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
